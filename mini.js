async function fetchDataAndSplit(){const e={reportType:1,from:"2024-01-25"},a=new URL("https://idp.mymarkers.io/api/kenku/dailyglucosereport");Object.keys(e).forEach((t=>a.searchParams.append(t,e[t])));try{const e=await fetch(a,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.json(),r=(t.type,t.overall);t.parameters,t.lineData;updateOverallScore(r.score),renderParameterCards(t.parameters);renderChart(getChartData(t.lineData))}catch(e){}}function updateOverallScore(e){document.querySelectorAll('[apiData="ChartResultDailyScore"]').forEach((a=>{a.textContent=e}))}function renderParameterCards(e){const a=document.querySelector('[apiData="parameterContainer"]'),t=document.querySelector('[apiData="recapParameterCard"]'),r=a.querySelector('[apiData="recapOverall"]');a&&t&&(t.style.display="none",Array.from(a.children).forEach((e=>{e!==t&&e!==r&&e.remove()})),e.forEach((e=>{if(null===e.name&&null===e.subTitle||!e.values||0===e.values.length||e.values.some((e=>null===e.val)))return;const r=t.cloneNode(!0);r.style.display="";const o=r.querySelector('[apiData="recapParameterTitle"]'),n=r.querySelector('[apiData="recapParameterResult"]'),l=r.querySelector('[apiData="recapParameterSubResult"]'),i=e.values[0].val;o&&(o.textContent=e.name||"No Title"),n&&(n.textContent=String(i)),l&&(l.textContent=e.subTitle||"No Subtitle"),r.removeAttribute("apiData"),a.appendChild(r)})))}function getChartData(e){const a=e.filter((e=>null!==e.GCV&&["S1","S2","S3","S4","S5","S6","S7","S8"].some((a=>null!==e[a])))),t=a.map((e=>e.datetime)),r=a.map((e=>e.GCV)),o=Math.min(...a.map((e=>e.S1))),n=Math.max(...a.map((e=>e.S2))),l=r.map((e=>e<o||e>n?"red":"green")),i={};["S3","S4","S5","S6","S7","S8"].forEach((e=>{const t=a.map((a=>a[e])).filter((e=>null!==e));t.length>0&&(i[e]=t)}));return{labels:t,mainLineData:r,backgroundColors:l,lowThresholdValue:o,highThresholdValue:n,seriesData:i}}function renderChart({labels:e,mainLineData:a,backgroundColors:t,lowThresholdValue:r,highThresholdValue:o,seriesData:n}){const l=document.getElementById("chart-canvas");new Chart(l,{data:{datasets:[{type:"line",label:"GCV",data:a,fill:!1,borderColor:t,segment:{borderColor:function(e){const a=e.p1.parsed.y;return a>=o||a<=r?"red":a<o||a>r?"green":"gray"}},backgroundColor:t,borderWidth:1,tension:.1,pointRadius:0},{type:"bar",label:"sleep",data:n.S7,fill:!1,borderColor:"purple",borderWidth:1,tension:.1,pointRadius:0}],labels:e},options:{scales:{x:{type:"time",time:{parser:"YYYY-MM-DD HH:mm:ss",tooltipFormat:"ll HH:mm",unit:"hour",displayFormats:{hour:"D MMM YYYY, hA"}},ticks:{source:"auto",maxRotation:0,autoSkip:!0,maxTicksLimit:24}},y:{beginAtZero:!0,min:0,max:200,ticks:{stepSize:50}}},plugins:{annotation:{annotations:{lineLow:{type:"line",yMin:r,yMax:r,borderColor:"grey",borderWidth:1,label:{content:`Low threshold (${r})`,enabled:!0,position:"start"}},lineHigh:{type:"line",yMin:o,yMax:o,borderColor:"grey",borderWidth:1,label:{content:`High threshold (${o})`,enabled:!0,position:"start"}}}},zoom:{pan:{enabled:!0,mode:"xy"},zoom:{wheel:{enabled:!0,speed:.25},mode:"xy",limits:{y:{min:300,max:50}}}}}}})}fetchDataAndSplit();